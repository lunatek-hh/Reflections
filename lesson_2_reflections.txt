What happens when you initialize a repository? Why do you need to do it?
The way to initialise a repository is by using the command : "git init".
THe way to check on what files and how many commits we hace is by using the command: "git status"
When we initialise the repository a new empty hidden git folder is created.
There are 0 commits made at that moment, it merely says that we are now working as a version control

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is like a temporary area where the files to be commited are compiled together.
It is different from the working directory in the sense that not all files of the directory needs to be there, thus only those files where actual changes are happening can be committed to this.
It has the value of not needing to repeat files, thus saving space. on the other hand, it does seem a little tedious and time consuming to individually keep adding files.
this might prove to be sligthly counter-productive if there are too many files which need commitment

How can you use the staging area to make sure you have one commit per logical change?
by checking out the staging area, using the command:
'git status'
it is possible to check how many files have been edited.
then follow it up with the command
'git add FILENAME'
that adds the file from the working directory to the staging area
from the staging are the one can use the command,
'git commit'
this leads to the text editor opening up to put in the commit message.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful when we want to try something which is boldly different from the original idea.
this could allow the developer to try a new direction which is reasonably different from the original algorithm.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The way to create a branch, is to use the command:
'git branch BRANCHNAME(Label)'
We can checkout he branches by the command:
'git branch'
the branches will be listed in the following format:
NEW_BRANCH
Master* (the * represents the active branch)
we can seperate commits in each branch, and then combine them later.
for example lets say we started  a new Branch called COINS.
so after making all the appropriate changes, we can merge them by using the command:
'git branch master coins'
it is important to note that we need to be in the master branch to do that.
to check we can just type
'git branch' - which should, show us the currently active branch by putting a * next to it.
we can be in the master branch mode by typing:
'git checkout master'
the new branch which has already been merged to the master is no longer needed by its own lablel. so the older label can be deleted.
the way to do this is by the command:
'git branch -d LABELNAME'
this wont delete the commits of the branch only its label

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git merging works by going into the branch you want to merge into and typing in the following command:
'git merge labelINTO labelFROM'
when the changes are different and do not really collide with each other, then the merging is automatic.
however sometime there are conflicts. similiar code might be modified/created in both the branches.
in such a possibility git would not know which to keep, or which to drop. so git decides to let the user make the decision.
a temporary state is created:
'labelINTO | merging'
in this state one might see where the conflict is happening by the command:
'git status'
the user can then check the conflicting file and make the correct editions.
on completion of this process, the user can now add the changed file for a final commitment by the command:
'git add FILENAME'
the merging can then be completed by the command:
'git commit'